global
    log 127.0.0.1 local0
    # log 127.0.0.1 local1 notice
    user root
    group root
    daemon
    maxconn 20000

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000

frontend haproxynode
    bind *:9080
    mode http

    # Domains to protect
    acl acl_public hdr_beg(host) -i public.example.com
    acl acl_app1 hdr_beg(host) -i app1.example.com
    acl acl_app2 hdr_beg(host) -i app2.example.com

    acl dex_domain hdr_beg(host) -i dex.example.com
    acl auth_domain hdr_beg(host) -i auth.example.com
    
    # define the spoe agent
    filter spoe engine spoe-auth config /usr/local/etc/haproxy/spoe-auth.conf

    # map the spoe response to acl variables
    acl authenticated var(sess.auth.is_authenticated) -m bool

    use_backend backend_dex if dex_domain
    use_backend backend_oauth2-callback if auth_domain 

    # app1 returns 401 when it's not authenticated
    use_backend backend_unauthorized if acl_app1 ! authenticated
    use_backend backend_app if acl_app1 authenticated

    # app2 redirects the user to the OAuth2 server when not authenticated
    use_backend backend_redirect if acl_app2 ! authenticated
    use_backend backend_app if acl_app2 authenticated

    # otherwise, simply serve the public domain
    default_backend backend_public

# Public page
backend backend_public
    mode http
    balance roundrobin
    server node-unprotected-app unprotected-backend:80 check

# Page supposed to be protected
backend backend_app
    mode http
    balance roundrobin

    server node-protected-app protected-backend:80 check

# Serve dex application
backend backend_dex
    mode http
    balance roundrobin

    server node-dex-app dex:5556 check

# Page the user is redirected to when unauthorized
backend backend_unauthorized
    mode http
    balance roundrobin
    http-response set-status 401
    http-response add-header WWW-Authenticate 'Basic realm="Access the webapp"'

    server node-noauth unauthorized-backend:80 check

# Page the user is redirected to when unauthorized
backend backend_redirect
    mode http
    balance roundrobin
    http-request redirect location %[var(sess.auth.redirect_url)]

# Backend bridging with the SPOE agent
backend backend_spoe-agent
    mode tcp
    balance roundrobin

    timeout connect 5s
    timeout server  3m

    server node-auth spoe:8081

backend backend_oauth2-callback
    mode http
    balance roundrobin

    timeout connect 5s
    timeout server  3m

    server node-auth spoe:5000
